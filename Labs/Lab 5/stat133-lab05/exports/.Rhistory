#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
ggplot(data = dat,aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(mapping = salary ~ experience)
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(mapping = salary ~ experience)
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(aes(mapping = salary ~ experience))
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
ggplot(data = dat, aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "lm")
#Make a scatterplot of experience and salary of all Centers, and use geom_smooth() to add a regression line.
ggplot(data = filter(dat, position == "C"), aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "lm")
#Repeat the same scatterplot of experience and salary of all Centers, but now use geom_smooth() to add a loess line (i.e. smooth line).
ggplot(data = filter(dat, position == "C"), aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "sm")
#Repeat the same scatterplot of experience and salary of all Centers, but now use geom_smooth() to add a loess line (i.e. smooth line).
ggplot(data = filter(dat, position == "C"), aes(x = experience, y = salary)) +
geom_point() +
geom_smooth(method = "loess")
setwd('/Users/Frankie/Documents/School/Econ 142/Problem Set 4')
rm()list = ls()
rm(list = ls())
dat <- read.csv("/Users/Frankie/Documents/School/Econ 142/Problem Set 4/ovb.csv")
female <- dat[dat$female == 1, ]
cor(female$educ, female$logwage)
corr_coeff <- cor(female$educ, female$logwage)
print(paste())
lm(female$logwage ~ female$educ)
summary(lm(female$logwage ~ female$educ))
corr_coeff^2
summary(lm(female$logwage ~ female$educ))
summary(lm(female$logwage ~ female$educ))
corr_coeff^2
corr_coeff <- cor(female$logwage, female$educ)
corr_coeff^2
summary(lm(female$logwage ~ female$educ))
print(paste("The correlation coefficient is", corr_coeff))
print(paste("The correlation coefficient squared is", corr_coeff^2))
summary(lm(female$logwage ~ female$educ))
lm(female$logwage ~ female$educ)
#R^2 from Female Logwage ~ Educ OLS model
r_squared <- summary(Q2_model)$r.squared
#Female Logwage ~ Educ OLS model
Q2_model <- summary(lm(female$logwage ~ female$educ))
#R^2 from Female Logwage ~ Educ OLS model
r_squared <- summary(Q2_model)$r.squared
#R^2 from Female Logwage ~ Educ OLS model
r_squared <- Q2_model$r.squared
#Female Logwage ~ Educ OLS model
(Q2_model <- summary(lm(female$logwage ~ female$educ)))
#R^2 from Female Logwage ~ Educ OLS model
r_squared <- Q2_model$r.squared
print(paste("The R Squared for the logwages on education is", r_squared))
print(paste("The correlation coefficient squared is", corr_coeff^2))
print(paste("The R Squared for the logwages on education is", r_squared))
print(paste("The correlation coefficient squared is", corr_coeff^2))
print(paste("The R Squared for the logwages on education is", r_squared))
print(paste("The correlation coefficient is", corr_coeff))
print(paste("The correlation coefficient squared is", corr_coeff^2))
print(paste("The R Squared for the logwages on education is", r_squared))
#Female
Q2_opposite_model <- summary(lm(female$educ ~ female$logwage))
#Female
(Q2_opposite_model <- summary(lm(female$educ ~ female$logwage)))
#R^2 from Female Educ ~ Logwage model
r_squared_opposite <- Q2_opposite_model$r.squared
print(paste("The correlation coefficient is", corr_coeff))
print(paste("The correlation coefficient squared is", corr_coeff^2))
print(paste("The R Squared for the log wages on education is", r_squared))
print(paste("The R Squared for the education on log wages is", r_squared_opposite))
fem_imm <- female[female$imm == 1, ]
fem_nat <- female[female$imm == 0, ]
#defining a function for SE of the mean
se <- function(x) sqrt(var(x)/length(x))
#Mean and SE of Female Immigrant logwage
mean(fem_imm$logwage)
se(fem_imm$logwage)
#Mean and SE of Female Native logwage
mean(fem_nat$logwage)
se(fem_nat$logwage)
#Ultiizing a F-test of varience in order to determine whether to utilize the t-test with pooled
#or unpooled variences
#IMPORTANT NOT OUR TEST OF THE MEANS
#THIS IS A TEST FOR IF THE VARIENCES OF THE TWO GROUPS ARE EQUIVALENT
var.test(fem_imm$logwage, fem_nat$logwage)
t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE)
summary(lm(logwage~imm, data= female))
t.test(fem_nat$logwage, fem_imm$logwage, var.equal = FALSE)
t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE)
paste("The difference in means is", mean(fem_imm$logwage) - mean(fem_nat$logwage))
summary(lm(logwage~imm, data= female))
Q3b <- summary(lm(logwage~imm, data= female))
(Q3b <- summary(lm(logwage~imm, data= female)))
paste0("The Beta_1 coefficient is", Q3b$terms)
paste0("The Beta_1 coefficient is", Q3b$coefficients)
paste0("The Beta_1 coefficient is", Q3b$coefficients[2])
paste("The Beta_1 coefficient is", Q3b$coefficients[2])
paste("The difference in means is", mean(fem_imm$logwage) - mean(fem_nat$logwage))
paste("The Beta_1 coefficient is", Q3b$coefficients[2])
Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE)
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE))
Q3a$parameter
Q3a$statistic
c("The OLS t-value is", Q3b$terms)
(Q3b <- summary(lm(logwage~imm, data= female)))
c("The OLS t-value is", -10.89, "and the t.statistic is" ,Q3a$statistic)
paste(c("The OLS t-value is", -10.89, "and the t.statistic is" ,Q3a$statistic))
paste(c("The OLS t-value is", -10.89, "and the t.statistic is" ,Q3a$statistic))
print(paste(c("The OLS t-value is", -10.89, "and the t.statistic is" ,Q3a$statistic)))
print(paste(c("The OLS t-value is", -10.89, "and the t.statistic is" ,Q3a$statistic), collapse=""))
print(paste(c("The OLS t-value is ", -10.89, "and the t.statistic is " ,Q3a$statistic), collapse=""))
print(paste(c("The OLS t-value is ", -10.89, " and the t.statistic is " ,Q3a$statistic), collapse=""))
(Q3b <- summary(lm(logwage~imm, data= female)))
print(paste(c("The OLS t-value is ", -10.89, " and the t.statistic is " ,Q3a$statistic), collapse=""))
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE))
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = TRUE))
(Q3b <- summary(lm(logwage~imm, data= female)))
#Ultiizing a F-test of varience in order to determine whether
#to utilize the t-test with pooled or unpooled variences
#IMPORTANT NOT OUR TEST OF THE MEANS
#THIS IS A TEST FOR IF THE VARIENCES OF THE TWO GROUPS ARE EQUIVALENT
var.test(fem_imm$logwage, fem_nat$logwage)
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE))
(Q3b <- summary(lm(logwage~imm, data= female)))
paste("The Beta_1 coefficient is", Q3b$coefficients[2])
plot(Q3b)
plot(lm(logwage~imm, data= female), which = c(1))
print(paste(c("The OLS t-value is ", -10.89, " and the t.statistic is " ,Q3a$statistic), collapse=""))
install.packages("sandwich")
install.packages("sandwich")
install.packages("s
library("sandwich")
library("sandwich")
ols <- lm(logwage~imm, data= female)
ols$robse=vcovHC(ols,typ e="HC1")
ols$robse=vcovHC(ols,type="HC1")
summary(ols)
ols$robse
ols <- lm(logwage~imm, data= female)
ols$robse
ols$residuals
ols$robse=vcovHC(ols,type="HC1")
ols$robse
(Q3b <- summary(lm(logwage~imm, data= female)))
paste("The difference in means is", mean(fem_imm$logwage) - mean(fem_nat$logwage))
paste("The Beta_1 coefficient is", Q3b$coefficients[2])
print(paste(c("The OLS t-value is ", -10.89, " and the t.statistic is " ,Q3a$statistic), collapse=""))
ols$robse
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
title = 'Female Immigration Status on Log Wages')
library("stargazer")
(Q3b <- summary(lm(logwage~imm, data= female)))
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = robust[,2],
title = 'Female Immigration Status on Log Wages')
m <- c(ols$robse[1,1], ols$robse[2,2])
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = m,
title = 'Female Immigration Status on Log Wages')
m
m <- matrix(ols$robse[1,1], ols$robse[2,2], nrow = 2, ncol = 1)
m
m
m
m
m
m
m
m
m
ols$robse[1,1]
ols$robse[2,2]
m <- matrix(ols$robse[1,1], ols$robse[2,2], nrow = 2, ncol = 1)
m
m <- matrix(c(ols$robse[1,1], ols$robse[2,2]), nrow = 2, ncol = 1)
m
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = m,
title = 'Female Immigration Status on Log Wages')
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = m[,1],
title = 'Female Immigration Status on Log Wages')
sqrt(diag(ols$robse))
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = sqrt(diag(ols$robse)),
title = 'Female Immigration Status on Log Wages')
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list(sqrt(diag(ols$robse))),
title = 'Female Immigration Status on Log Wages')
stargazer(ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list(sqrt(diag(ols$robse))),
title = 'Female Immigration Status on Log Wages with Robust Errors')
Q3b$coefficients
Q3b$coefficients[,2]
Q3b_regress <- lm(logwage~imm, data= female))
Q3b_regress <- lm(logwage~imm, data= female)
stargazer(Q3b_regress, ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list(Q3b$coefficients[,2], sqrt(diag(ols$robse))),
title = 'Female Immigration Status on Log Wages with Robust Errors')
(Q3b <- summary(lm(logwage~imm, data= female)))
add.lines = list(c("Robust Errors", "No", "Yes"),
stargazer(Q3b_regress, ols,
header = FALSE,
df = FALSE,
add.lines = list(c("Robust Errors", "No", "Yes"),
stargazer(Q3b_regress, ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list(Q3b$coefficients[,2], sqrt(diag(ols$robse))),
add.lines = list(c("Robust Errors", "No", "Yes")),
title = 'Female Immigration Status on Log Wages')
stargazer(Q3b_regress, ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list(Q3b$coefficients[,2], sqrt(diag(ols$robse))),
add.lines = list(c("Robust Errors", "No", "Yes")),
title = 'Female Immigration Status on Log Wages')
Q2_opposite_regress <- lm(female$educ ~ female$logwage))
Q2_opposite_regress <- lm(female$educ ~ female$logwage)
Q2_regress <- lm(female$logwage ~ female$educ)
stargazer(Q2_opposite_regress, Q2_regress ,Q3b_regress, ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list(Q3b$coefficients[,2], sqrt(diag(ols$robse))),
add.lines = list(c("Robust Errors", "No","No","No", "Yes")),
title = 'Female Immigration Status on Log Wages')
stargazer(Q2_opposite_regress, Q2_regress ,Q3b_regress, ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list(Q3b$coefficients[,2], sqrt(diag(ols$robse))),
add.lines = list(c("Robust Errors", "No","No","No", "Yes")),
title = 'Homework 4 Regressions')
stargazer(Q2_opposite_regress, Q2_regress ,Q3b_regress, ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list( Q2_opposite_regress$coefficients[,2],
Q2_regress$coefficients[,2],
Q3b$coefficients[,2],
sqrt(diag(ols$robse))),
add.lines = list(c("Robust Errors", "No","No","No", "Yes")),
title = 'Homework 4 Regressions')
Q2_opposite_regress$coefficients[,2]
Q2_opposite_regress$coefficients
Q2_opposite_regress$coefficients
Q2_opposite_regress$coefficients
Q2_opposite_regress$coefficients
3b$coefficients[,2]
Q2_opposite_regress <- lm(female$educ ~ female$logwage)
Q3b$coefficients
Q2_opposite_regress$coefficients
Q3b$coefficients
Q2_opposite_regress$coefficients
Q3b$coefficients
#Female Logwage ~ Educ OLS model
(Q2_model <- summary(lm(female$logwage ~ female$educ)))
Q2_regress <- lm(female$logwage ~ female$educ)
#FFemale Educ ~ Logwage model
(Q2_opposite_model <- summary(lm(female$educ ~ female$logwage)))
Q2_opposite_regress <- lm(female$educ ~ female$logwage)
Q2_opposite_regress$coefficients
Q3b$coefficients
Q2_opposite_regress$coefficients
Q3b$coefficients
Q2_opposite_regress$coefficients
Q2_opposite_regress$coefficients
Q2_regress$coefficients
Q2_model$coefficients
stargazer(Q2_opposite_regress, Q2_regress ,Q3b_regress, ols,
header = FALSE,
no.space = TRUE,
df = FALSE,
se = list( Q2_opposite_model$coefficients[,2],
Q2_model$coefficients[,2],
Q3b$coefficients[,2],
sqrt(diag(ols$robse))),
add.lines = list(c("Robust Errors", "No","No","No", "Yes")),
title = 'Homework 4 Regressions')
mean(fem_imm$logwage)
se(fem_imm$logwage)
#Mean and SE of Female Native logwage
mean(fem_nat$logwage)
se(fem_nat$logwage)
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = TRUE))
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE))
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = TRUE))
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE))
(Q3a <- t.test(fem_imm$logwage, fem_nat$logwage, var.equal = FALSE))
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5')
setwd('/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5')
wd()
getwd
getwd()
curl -O http://textfiles.com/food/btaco.txt, http://textfiles.com/food/1st_aid.txt ,http://textfiles.com/food/beesherb.txt, http://textfiles.com/food/bakebred.txt
#Use the command ls to list the contents in your current directory
curl -O http://textfiles.com/food/btaco.txt
curl -O http://textfiles.com/food/btaco.txt
#Use the command ls to list the contents in your current directory
curl -O http://textfiles.com/food/btaco.txt
#Use the command ls to list the contents in your current directory
ls
#Find out how to list files with names containing any number.
ls *[?]*.csv
#Find out how to list files with names containing any number.
ls -l *[?]*.csv
#Find out how to list files with names containing any number.
ls -l *[0-9]*.csv
#Inside stat133-lab05 create a directory data
mkdir data
mkdir data
#Use the command mv to move the bread.txt file to the folder txt-files. Without changing directories, use ls to confirm that bread.txt is now inside txt-files.
mv */bread.txt /txt-files
#Use the command mv to move the bread.txt file to the folder txt-files. Without changing directories, use ls to confirm that bread.txt is now inside txt-files.
mv '/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05/bread.txt' /txt-files
#Use the command mv to move the bread.txt file to the folder txt-files. Without changing directories, use ls to confirm that bread.txt is now inside txt-files.
mv '/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05/bread.txt' txt-files/
#Use the command mv to move the bread.txt file to the folder txt-files. Without changing directories, use ls to confirm that bread.txt is now inside txt-files.
mv **/bread.txt txt-files/
#Use the command mv to move the bread.txt file to the folder txt-files. Without changing directories, use ls to confirm that bread.txt is now inside txt-files.
mv ../bread.txt txt-files/
#Change directory to data
cd data
ls txt-files
ls txt-files
#Use the wildcard * to move all the .csv files to the directory csv-files. Without changing directories, use ls to confirm that all the .csv files are inside csv-files.
mv ../*.csv csv-files
ls csv.files
cd stat133-labo5
#Go back to the parent directory stat133-lab05
cd ../
#Go back to the parent directory stat133-lab05
cd '/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05'
#Use the command cp to copy the bread.txt file (the one inside the folder txt-files) to the copies directory
ls ./data/txt-files/bread.txt ./copies
#Change to the parent directory (i.e. stat133-lab05)
cd ../
#Find out how to use the rm command to delete the .csv files that are in copy-files
rm ./copy-files/*.csv
ls copy-files
rm(list = ls())
#Use ggplot() to make a scatterplot of mpg and disp, and store it in a ggplot object named gg_mpg_disp. Then use ggsave() to save the plot with dimensions (width x height) 7 x 5 inches, as scatterplot-mpg-disp.pdf.
#Export a data frame with columns mpg, disp, and hp, to a CSV file dataset.csv in the exports/ subdirectory.
getwd()
#Export a data frame with columns mpg, disp, and hp, to a CSV file dataset.csv in the exports/ subdirectory.
setwd("/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05")
#Export a data frame with columns mpg, disp, and hp, to a CSV file dataset.csv in the exports/ subdirectory.
setwd("/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05/exports")
setwd("/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05/exports")
setwd("/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05/exports")
getwd
getwd()
load(mtcars)
data(mtcars)
names(mtcars)
#Export the output of str() on mtcars to a text file called mtcars-structure.txt (inside the exports/ subdirectory).
str(mtcars)
sink(file = 'stat133-lab05/mtcars-structure.txt')
str(mtcars)
sink()
sink(file = 'stat133-lab05/exports/mtcars-structure.txt')
str(mtcars)
sink()
#Export the summary() of the entire data frame mtcars to a text file summary-mtcars.txt, in the exports/ folder.
sink(file = 'stat133-lab05/exports/summary-mtcars.txt')
summary(mtcars)
sink()
#Open the help documentation of png() and related graphic devices.
help(png())
#Open the help documentation of png() and related graphic devices.
help(png)
#Use png() to save a scatterplot of mpg and wt with plot(). Save the graph as scatterplot-mpg-wt.png in the exports/ folder.
png(filename = "stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight')
dev.off()
png(filename = "stat133-lab05/exports/scatterplot-mpg-wt.png")
plot(mtcars$mpg, mtcars$wt, pch = 20,
xlab = 'Miles per Gallon', ylab = 'Weight')
dev.off()
plot(mtcars$hp, mtcars$wt, pch = 20, res = 1080
xlab = 'Horsepower', ylab = 'Weight')
plot(mtcars$hp, mtcars$wt, pch = 20, res = 1080,
xlab = 'Horsepower', ylab = 'Weight')
#Save another version of the scatterplot between hp and wt, but now try to get an image with higher resolution. Save the plot as scatterplot-hp-wt.png in exports/.
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", res = 1080)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
dev.off()
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", res = 1080)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", res = 480)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Ho
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", res = 480)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", res = 480)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png")
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
dev.off()
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", width = 1080, height = 1080)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
dev.off()
#Save another version of the scatterplot between hp and wt, but now try to get an image with higher resolution. Save the plot as scatterplot-hp-wt.png in exports/.
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", width = 1080, height = 1080, res = 1080)
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", width = 1080, height = 1080, res = 1080)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
jpeg(filename = "stat133-lab05/exports/histogram-mpg.jpg", width = 600, height = 400)
hist(mtcars$mpg, xlab = "MPG")
dev.off()
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", width = 1080, height = 1080)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
dev.off()
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", res = 150)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
dev.off()
png(filename = "stat133-lab05/exports/scatterplot-hp-wt.png", width = 720, height = 720)
plot(mtcars$hp, mtcars$wt, pch = 20,
xlab = 'Horsepower', ylab = 'Weight')
dev.off()
help(pdf())
help(pdf
)
mtcars[,c("mpg", "disp", "hp")]
sink(file = 'stat133-lab05/exports/dataset.csv')
mtcars[,c("mpg", "disp", "hp")]
sink()
pdf(file = "histogram-mpg.pdf", width = 7, Height = 5)
#Use pdf() to save the previous histogram of mpg in PDF format, with dimensions (width x height) 7 x 5 inches, name the file histogram-mpg.pdf.
pdf(file = "histogram-mpg.pdf", width = 7, height = 5)
pdf(file = "histogram-mpg.pdf", width = 7, height = 5)
hist(mtcars$mpg, xlab = "MPG")
dev.off()
pdf(file = "histogram-mpg.pdf", width = 7, height = 5)
hist(mtcars$mpg, xlab = "MPG")
dev.off()
#Export a data frame with columns mpg, disp, and hp, to a CSV file dataset.csv in the exports/ subdirectory.
library(ggplot2)
write.csv(mtcars[,c("mpg", "disp", "hp")], 'stat133-lab05/exports/dataset.csv')
hist(mtcars$mpg, xlab = "MPG")
#Use pdf() to save the previous histogram of mpg in PDF format, with dimensions (width x height) 7 x 5 inches, name the file histogram-mpg.pdf.
pdf(nistogram-mpg.pdf,width=7,height=5,paper='special')
#Use pdf() to save the previous histogram of mpg in PDF format, with dimensions (width x height) 7 x 5 inches, name the file histogram-mpg.pdf.
pdf(histogram-mpg.pdf,width=7,height=5,paper='special')
pdf('histogram-mpg.pdf',width=7,height=5,paper='special')
hist(mtcars$mpg, xlab = "MPG")
dev.off()
#The package "ggplot2" comes with a wrapper function ggsave() that allows you to save ggplot graphics to a specified file. By default, ggsave() saves images in PDF format.
ggplot(data= mtcars, aes(x = mpg, y = disp)) + geom_point()
ggsave('gg_mpg_disp.pdf', ggplot(data= mtcars, aes(x = mpg, y = disp)) + geom_point(), path = '/Users/Frankie/Documents/School/Stat 133/Labs/Lab 5/stat133-lab05/exports')
#Use pdf() to save the previous histogram of mpg in PDF format, with dimensions (width x height) 7 x 5 inches, name the file histogram-mpg.pdf.
pdf('histogram-mpg.pdf',width=7,height=5)
pdf('histogram-mpg.pdf',width=7,height=5)
hist(mtcars$mpg, xlab = "MPG")
dev.off()
histogram-mpg.pdf <- hist(mtcars$mpg, xlab = "MPG")
histogram-mpg.pdf <- hist(mtcars$mpg, xlab = "MPG")
pdf('histogram-mpg.pdf',width=7,height=5)
hist(mtcars$mpg, xlab = "MPG")
dev.off()
pdf('stat133-lab05/exports/histogram-mpg.pdf',width=7,height=5)
hist(mtcars$mpg, xlab = "MPG")
dev.off()
